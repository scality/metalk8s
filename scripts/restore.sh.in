#!/bin/bash
set -e
set -u
set -o pipefail

VERBOSE=${VERBOSE:-0}
CHECK_INTEGRITY=${CHECK_INTEGRITY:-1}
LOGFILE="/var/log/metalk8s/restore.log"

_usage() {
    echo "$(basename "$0") [options]"
    echo "Options:"
    echo "-b/--backup-file <backup_file>:   Path to backup file"
    echo "-i/--apiserver-node-ip <ip>:      Node IP of one apiserver"
    echo "-l/--log-file <logfile_path>:     Path to log file"
    echo "--disable-integrity-check         Disable archive integrity check"
    echo "-v/--verbose:                     Run in verbose mode"
}

while (( "$#" )); do
  case "$1" in
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -l|--log-file)
      LOGFILE="$2"
      shift 2
      ;;
    -b|--backup-file)
      BACKUP_ARCHIVE="$2"
      shift 2
      ;;
    -i|--apiserver-node-ip)
      APISERVER_IP="$2"
      shift 2
      ;;
    --disable-integrity-check)
      CHECK_INTEGRITY=0
      shift
      ;;
    *) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      _usage
      exit 1
      ;;
  esac
done

TMPFILES=$(mktemp -d)
BACKUP_DIR=$(mktemp -d)

mkdir -p "$(dirname "$LOGFILE")"

rotate_logfile

cat << EOF >> "${LOGFILE}"
--- Restore started on $(date -u -R) ---
EOF

exec > >(tee -ia "${LOGFILE}") 2>&1

cleanup() {
    rm -rf "${TMPFILES}" || true
    rm -rf "${BACKUP_DIR}" || true
}

trap cleanup EXIT

BASE_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

SALT_CALL=${SALT_CALL:-salt-call}

declare -a PACKAGES=(
    salt-minion-@@SALT_VERSION
    # NOTE: `python3-psutil` will install `python36-psutil` on RHEL7 based and
    # `python3-psutil on RHEL8, as expected
    python3-psutil
    genisoimage
)

# shellcheck disable=SC1090,SC1091
. "$BASE_DIR"/common.sh

_save_cp() {
    local -r src="$(readlink -f "$1")"
    local -r dst="$2"
    if [ -f "$src" ]; then
        echo "Copying '$src' to '$dst'"
        if [ ! -d "$(dirname "$dst")" ]; then
          echo "Creating '$(dirname "$dst")' directory"
          mkdir -p "$(dirname "$dst")"
        fi
        cp -a "$src" "$dst"
    elif [ -d "$src" ]; then
        for filename in "$src"/*; do
            _save_cp "$filename" "$dst/$(basename "$filename")"
        done
    else
        echo "Error: '$src' does not exists" >&2
        exit 1
    fi
}

extract_archive() {
    tar -C "$BACKUP_DIR" -xz -f "$BACKUP_ARCHIVE" ./
}

check_integrity() {
    ( cd "$BACKUP_DIR" && sha256sum -c .sha256sum )
}

install_salt_minion() {
    local -a yum_opts=(
        '--assumeyes'
    )

    "$YUM" install "${yum_opts[@]}" salt-minion
}

install_genisoimage() {
    local -a yum_opts=(
        '--assumeyes'
    )

    "$YUM" install "${yum_opts[@]}" genisoimage
}

restore_metalk8s_conf() {
    _save_cp "${BACKUP_DIR}/metalk8s" "/etc/metalk8s"

    local -r bootstrap_id=$(
        ${SALT_CALL} --local --out txt grains.get id \
        | awk '/^local\: /{ print $2 }'
    )

    "$SALT_CALL" --local --retcode-passthrough state.single file.serialize \
        "/etc/metalk8s/bootstrap.yaml" formatter="yaml" merge_if_exists=True \
        dataset="{'ca': {'minion': '$bootstrap_id'}}"
}

restore_cas() {
    local -r ca_dir='/etc/kubernetes/pki/'
    local -a ca_files=(
        'ca.key'
        'ca.crt'
        'front-proxy-ca.key'
        'front-proxy-ca.crt'
        'etcd/ca.key'
        'etcd/ca.crt'
        'sa.key'
        'sa.pub'
    )
    for ca in "${ca_files[@]}"; do
        _save_cp "${BACKUP_DIR}/kubernetes/pki/$ca" "${ca_dir}$ca"
    done
}

configure_salt_master() {
    local -r control_plane_ip=$(
        ${SALT_CALL} --local grains.get metalk8s:control_plane_ip --out txt \
        | awk '/^local\: /{ print $2 }'
    )

    pillar=(
      "{"
      "  'apiserver_ip': ${APISERVER_IP:-''},"
      "  'repo': {'local_mode': True},"
      "  'metalk8s': {"
      "    'endpoints': {"
      "      'repositories': [{"
      "         'ip': $control_plane_ip,"
      "         'ports': {'http': 8080}"
      "      }],"
      "      'salt-master': [{'ip': $control_plane_ip}]"
      "    }"
      "  }"
      "}"
    )

    "${SALT_CALL}" --local --state-output=mixed --retcode-passthrough state.sls \
        '["metalk8s.roles.internal.early-stage-bootstrap", "metalk8s.kubernetes.apiserver-proxy"]' \
        saltenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"

    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")

    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_all \
        saltenv=metalk8s-@@VERSION
    "${SALT_MASTER_CALL[@]}" salt-run metalk8s_saltutil.sync_auth \
        saltenv=metalk8s-@@VERSION

    local -r bootstrap_id=$(
        ${SALT_CALL} --local --out txt grains.get id \
        | awk '/^local\: /{ print $2 }'
    )

    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.orchestrate.bootstrap.accept-minion \
        saltenv=metalk8s-@@VERSION \
        pillar="{'bootstrap_id': '$bootstrap_id'}"

    "${SALT_CALL}" --retcode-passthrough saltutil.sync_all \
        refresh=True \
        saltenv=metalk8s-@@VERSION

    "${SALT_CALL}" --retcode-passthrough --state-output=mixed state.sls \
        metalk8s.kubernetes.kubelet \
        saltenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"

    "${SALT_CALL}" --retcode-passthrough --state-output=mixed state.sls \
        metalk8s.kubernetes.apiserver.kubeconfig \
        saltenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"

    "${SALT_CALL}" --retcode-passthrough --state-output=mixed state.sls \
        metalk8s.salt.master.kubeconfig \
        saltenv=metalk8s-@@VERSION \
        pillar="${pillar[*]}"
}

push_cas() {
    "${SALT_CALL}" --retcode-passthrough mine.send "kubernetes_root_ca_b64" \
        mine_function="hashutil.base64_encodefile" \
        /etc/kubernetes/pki/ca.crt
    "${SALT_CALL}" --retcode-passthrough mine.send 'kubernetes_etcd_ca_b64' \
        mine_function="hashutil.base64_encodefile" \
        /etc/kubernetes/pki/etcd/ca.crt
    "${SALT_CALL}" --retcode-passthrough mine.send 'kubernetes_front_proxy_ca_b64' \
        mine_function="hashutil.base64_encodefile" \
        /etc/kubernetes/pki/front-proxy-ca.crt
    "${SALT_CALL}" --retcode-passthrough mine.send 'kubernetes_sa_pub_key_b64' \
        mine_function="hashutil.base64_encodefile" \
        /etc/kubernetes/pki/sa.pub
}

mark_control_plane() {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")

    local -r bootstrap_id=$(
        ${SALT_CALL} --local --out txt grains.get id \
        | awk '/^local\: /{ print $2 }'
    )
    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.kubernetes.mark-control-plane.deployed \
        saltenv=metalk8s-@@VERSION \
        pillar="{'bootstrap_id': '$bootstrap_id'}"

    "${SALT_CALL}" --retcode-passthrough mine.update
}

reconfigure_nodes() {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    local -r non_bootstrap=$(
        ${SALT_CALL} --out=txt slsutil.renderer \
        string="{{ pillar.metalk8s.nodes.keys() | difference(salt.metalk8s.minions_by_role('bootstrap')) | join(',') }}" \
        | awk '/^local\: /{ print $2 }'
    )

    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_roster \
        saltenv=metalk8s-@@VERSION
    "${SALT_MASTER_CALL[@]}" salt-ssh --roster kubernetes \
        -L "$non_bootstrap" \
        file.remove /etc/salt/pki/minion/minion_master.pub
    "${SALT_MASTER_CALL[@]}" salt-ssh --roster kubernetes \
        -L "$non_bootstrap" --state-output=mixed \
        state.sls '["metalk8s.roles.minion", "metalk8s.container-engine"]' \
        saltenv=metalk8s-@@VERSION
    "${SALT_MASTER_CALL[@]}" salt-key -A -y

    # Wait all minions to be ready
    "${SALT_MASTER_CALL[@]}" salt-run metalk8s_saltutil.wait_minions

    # In salt 2018.3 we can not do synchronous pillar refresh, so add a sleep
    # See htpps://github.com/saltstack/salt/issues/20590
    "${SALT_MASTER_CALL[@]}" salt '*' saltutil.refresh_pillar && sleep 20
    "${SALT_MASTER_CALL[@]}" salt '*' mine.update

    "${SALT_MASTER_CALL[@]}" salt -L "$non_bootstrap" --state-output=mixed \
        state.sls metalk8s.kubernetes.apiserver-proxy \
        saltenv=metalk8s-@@VERSION

    # For kubelet 1.16+ in case of connection failure kubelet will not
    # reconnect until restart (since we are in restore we have lose the old
    # bootstrap node so connection may have fail)
    # See https://github.com/kubernetes/kubernetes/issues/87615
    "${SALT_MASTER_CALL[@]}" salt -L "$non_bootstrap" service.restart kubelet
}

highstate_bootstrap() {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    local -r bootstrap_id=$(
        ${SALT_CALL} --local --out txt grains.get id \
        | awk '/^local\: /{ print $2 }'
    )

    "${SALT_CALL}" --retcode-passthrough --state-output=mixed state.sls \
        metalk8s.salt.master.certs \
        saltenv=metalk8s-@@VERSION
    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.orchestrate.deploy_node \
        saltenv=metalk8s-@@VERSION \
        pillar="{'orchestrate': {'node_name': '$bootstrap_id'}}"
}

reconfigure_k8s_obj() {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")

    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.addons.nginx-ingress-control-plane.deployed \
        saltenv=metalk8s-@@VERSION

    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.addons.dex.deployed \
        saltenv=metalk8s-@@VERSION

    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.addons.prometheus-operator.deployed \
        saltenv=metalk8s-@@VERSION

    "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
        metalk8s.addons.ui.deployed \
        saltenv=metalk8s-@@VERSION
}

if [ ! -f "$BACKUP_ARCHIVE" ]; then
    echo "Backup '$BACKUP_ARCHIVE' file does not exist" >&2
    exit 1
fi

run "Determine the OS" determine_os
run "Extract backup archive '$BACKUP_ARCHIVE'" extract_archive
[ $CHECK_INTEGRITY -eq 0 ] || run "Checking backup archive integrity" check_integrity
run "Pre-minion system tests" pre_minion_checks
run "Disabling Salt minion service" disable_salt_minion_service
run "Stopping Salt minion service" stop_salt_minion_service
run "Configuring local repositories" configure_repositories
run "Installing mandatory packages" install_packages "${PACKAGES[@]}"
run "Checking Salt minion ID" check_minion_id
run "Configuring Salt minion to run in local mode" configure_salt_minion_local_mode

run "Restoring MetalK8s configurations" restore_metalk8s_conf
run "Ensure archive is available" ensure_archives_mounted
run "Calculating Salt grains in local mode" set_local_grains

run "Checking local node" check_local_node

run "Restoring CAs certificates and keys" restore_cas
run "Configuring salt-master" configure_salt_master
run "Pushing CAs to salt mine" push_cas
run "Marking new bootstrap node" mark_control_plane

run "Reconfiguring all nodes" reconfigure_nodes

run "Applying highstate on the new bootstrap node" highstate_bootstrap

run "Reconfiguring some Kubernetes objects" reconfigure_k8s_obj

"$BASE_DIR"/backup.sh
