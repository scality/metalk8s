#!/bin/bash
set -e
set -u
set -o pipefail

VERBOSE=${VERBOSE:-0}
LOGFILE=/var/log/metalk8s/upgrade.log
DRAIN_TIMEOUT=${DRAIN_TIMEOUT:-0}
DRY_RUN=0
DESTINATION_VERSION=${DESTINATION_VERSION:-@@VERSION}
# SALTENV must be equal to script version and DESTINATION_VERSION
# (checked by the precheck runner)
SALTENV="metalk8s-$DESTINATION_VERSION"
SALT_CALL=${SALT_CALL:-salt-call}
BASE_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")


_usage() {
    echo "upgrade.sh [options]"
    echo "Options:"
    echo "-D/--drain-timeout:              Change the node drain timeout (in seconds)"
    echo "-l/--log-file <logfile_path>:    Path to log file"
    echo "-v/--verbose:                    Run in verbose mode"
    echo "-d/--dry-run:                    Run actions in dry run mode"
    echo "-h/--help:                       Show this help menu"
}

while (( "$#" )); do
  case "$1" in
    -D|--drain-timeout)
      DRAIN_TIMEOUT="$2"
      shift 2
      ;;
    -d|--dry-run)
      DRY_RUN=1
      shift
      ;;
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -l|--log-file)
      LOGFILE="$2"
      shift 2
      ;;
    -h|--help)
      _usage
      exit
      ;;
    *) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      _usage
      exit 1
      ;;
  esac
done

TMPFILES=$(mktemp -d)

# shellcheck disable=SC1090,SC1091
. "$BASE_DIR"/common.sh

mkdir -p "$(dirname "${LOGFILE}")"

rotate_logfile

cat << EOF >> "${LOGFILE}"
--- MetalK8s Upgrade started on $(date -u -R) ---
EOF

exec > >(tee -ia "${LOGFILE}") 2>&1

cleanup() {
    rm -rf "${TMPFILES}" || true
}

trap cleanup EXIT

upgrade_bootstrap () {
    "$SALT_CALL" saltutil.sync_all saltenv="$SALTENV"

    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate \
        metalk8s.orchestrate.bootstrap.pre-upgrade \
        saltenv="$SALTENV"

    # Upgrade salt-master in local mode since salt-master will restart
    "$SALT_CALL" --local saltutil.sync_all saltenv="$SALTENV" refresh=True
    "$SALT_CALL" --local --retcode-passthrough state.sls \
        metalk8s.salt.master.installed saltenv="$SALTENV"
}

launch_pre_upgrade () {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_all \
        saltenv="$SALTENV"

    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate \
        metalk8s.orchestrate.upgrade.pre \
        saltenv="$SALTENV"
}

launch_post_upgrade () {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate \
        metalk8s.orchestrate.upgrade.post \
        saltenv="$SALTENV"
}

upgrade_etcd () {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_all \
        saltenv="$SALTENV"

    "${SALT_MASTER_CALL[@]}" salt-run metalk8s_saltutil.sync_auth  \
        saltenv="$SALTENV"

    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_roster  \
        saltenv="$SALTENV"

    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate \
        metalk8s.orchestrate.etcd saltenv="$SALTENV"
}

upgrade_apiservers () {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate \
        metalk8s.orchestrate.apiserver saltenv="$SALTENV"
}

# NOTE: We need to upgrade local engine (kubelet + containerd) locally
#       before starting the node upgrade as we rely on salt-master running
#       in a container managed by kubelet and containerd
upgrade_local_engines () {
    local saltmaster_endpoint repo_endpoint
    saltmaster_endpoint="$($SALT_CALL pillar.get \
        metalk8s:endpoints:salt-master --out txt | cut -d' ' -f2- )"
    repo_endpoint="$($SALT_CALL pillar.get \
        metalk8s:endpoints:repositories --out txt | cut -d' ' -f2- )"

    # NOTE: Sleep a bit at the end so that container properly stop before
    #       going to the next step
    "${SALT_CALL}" --local --retcode-passthrough state.sls sync_mods="all" \
        metalk8s.kubernetes.kubelet.standalone saltenv="$SALTENV" \
        pillar="{'metalk8s': {'endpoints': {'salt-master': $saltmaster_endpoint, \
        'repositories': $repo_endpoint}}}" && sleep 20 || return 1

    # List of containers that need to be running to continue the upgrade
    local -a containers_to_check=(
        'repositories'
        'salt-master'
        'etcd'
        'kube-apiserver'
    )
    for container in "${containers_to_check[@]}"; do
        "${SALT_CALL}" --local --retcode-passthrough cri.wait_container \
            name="$container" state=running timeout=180 || return 1
    done

    # Make sure apiserver works well
    "${SALT_CALL}" --local --retcode-passthrough http.wait_for_successful_query \
        https://127.0.0.1:7443/healthz \
        verify_ssl=False status=200 match="ok"
}

upgrade_nodes () {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate \
        metalk8s.orchestrate.upgrade saltenv="$SALTENV" \
        pillar="{'orchestrate': {'drain_timeout': $DRAIN_TIMEOUT}}"
}

precheck_upgrade() {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")
    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_all \
        saltenv="$SALTENV"
    # Due to a bug in salt do not "raises" when we run from CLI
    # See: https://github.com/saltstack/salt/issues/61173
    "${SALT_MASTER_CALL[@]}" salt-run metalk8s_checks.upgrade \
        dest_version="$DESTINATION_VERSION" \
        saltenv="$SALTENV" \
        raises=False
}

# patch the kube-system namespace annotation with <destination-version> input
patch_kubesystem_namespace() {
    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")

    "${SALT_MASTER_CALL[@]}" salt-run saltutil.sync_all \
        saltenv="$SALTENV"

    #update the annotation with the new destination value
    "${SALT_MASTER_CALL[@]}" salt-run state.orchestrate_single \
        metalk8s_kubernetes.object_updated \
        "kube-system" \
        kind=Namespace apiVersion=v1 \
        patch="{'metadata': {'annotations': \
        {'metalk8s.scality.com/cluster-version': '$DESTINATION_VERSION'}}}"
}

run "Performing Pre-Upgrade checks" precheck_upgrade
[ $DRY_RUN -eq 1 ] && exit 0

# NOTE: We use --no-replication flag since the backup-server is not available
# in the previous version of MetalK8s.
# This flag can safely be removed in MetalK8s 2.12.
"$BASE_DIR"/backup.sh --no-replication

run "Determine the OS" determine_os
run "DEV: Installing extra packages" install_packages lvm2 tmux vim make automake gcc gcc-c++ kernel-devel swig openssl-devel
#run "Install extra salt packes" salt_install_extra
#run "Patch salt files" patch_salt
run "Upgrading bootstrap" upgrade_bootstrap
run "Setting cluster version to $DESTINATION_VERSION" patch_kubesystem_namespace
run "Launching the pre-upgrade" launch_pre_upgrade
run "Upgrading etcd cluster" upgrade_etcd
run "Upgrading all kube-api-server instances" upgrade_apiservers
run "Upgrading local containerd and kubelet" upgrade_local_engines
run "Upgrading all nodes one by one" upgrade_nodes
run "Launching the post-upgrade" launch_post_upgrade

"$BASE_DIR"/backup.sh
