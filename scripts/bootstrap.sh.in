#!/bin/bash

set -e
set -u
# The trickery below is to only run `set -o pipefail`, which is a Bash'ism,
# when running in Bash and not some other `sh` which doesn't necessarily
# support `-o pipefail` (though must support `-e` and `-u` per POSIX).
if test -z "$(type -p)"; then set -o pipefail; fi

VERBOSE=${VERBOSE:-0}
LOGFILE=/var/log/metalk8s/bootstrap.log
CONFIG_FILEPATH=/etc/metalk8s/bootstrap.yaml

if ! options=$(getopt --options v --long verbose,log-file: -- "$@"); then
    echo 1>&2 "Incorrect arguments provided"
    exit 1
fi
eval set -- "$options"

while true; do
    case "$1" in
        -v|--verbose)
            VERBOSE=1;
            shift;;
        --log-file)
            shift;
            LOGFILE="$1";
            shift;;
        --)
            shift;
            break;;
        *)
            echo 1>&2 "Option parsing failure";
            exit 1;;
    esac
done

TMPFILES=$(mktemp -d)

mkdir -p "$(dirname "${LOGFILE}")"

cat << EOF >> "${LOGFILE}"
--- Bootstrap started on $(date -u -R) ---
EOF

exec > >(tee -ia "${LOGFILE}") 2>&1

cleanup() {
    rm -rf "${TMPFILES}" || true
}

trap cleanup EXIT

BASE_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")

SALT_CALL=${SALT_CALL:-salt-call}

declare -a PACKAGES=(
    salt-minion-@@SALT_VERSION
    # NOTE: `python3-psutil` will install `python36-psutil` on RHEL7 based and
    # `python3-psutil` on RHEL8, as expected
    python3-psutil
    genisoimage
)

# shellcheck disable=SC1090,SC1091
. "$BASE_DIR"/common.sh

orchestrate_bootstrap() {
    local -r control_plane_ip=$(
        $SALT_CALL --local grains.get metalk8s:control_plane_ip --out txt \
        | awk '/^local\: /{ print $2 }'
    )

    pillar=(
      "{"
      "  'repo': {'local_mode': True},"
      "  'metalk8s': {"
      "    'endpoints': {"
      "      'repositories': [{"
      "         'ip': $control_plane_ip,"
      "         'ports': {'http': 8080}"
      "      }],"
      "      'salt-master': [{'ip': $control_plane_ip}]"
      "    }"
      "  }"
      "}"
    )

    run "Deploying early-stage bootstrap node in local mode (this may take a while)" \
        "$SALT_CALL" --local --state-output=mixed --retcode-passthrough \
            state.sls metalk8s.roles.internal.early-stage-bootstrap \
            saltenv=metalk8s-@@VERSION \
            pillarenv=metalk8s-@@VERSION \
            pillar="${pillar[*]}"

    SALT_MASTER_CALL=(crictl exec -i "$(get_salt_container)")

    run "Syncing Utility modules on Salt master" \
        "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed saltutil.sync_utils \
            saltenv=metalk8s-@@VERSION

    run "Syncing Pillar modules on Salt master" \
        "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed saltutil.sync_pillar \
            saltenv=metalk8s-@@VERSION
    run "Syncing Runner modules on Salt master" \
        "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed saltutil.sync_runners \
            saltenv=metalk8s-@@VERSION
    run "Syncing Execution modules on Salt master" \
        "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed saltutil.sync_modules \
            saltenv=metalk8s-@@VERSION

    local -r bootstrap_id=$(
        $SALT_CALL --local --out txt grains.get id \
        | awk '/^local\: /{ print $2 }'
    )

    pillar=(
      "{"
      "  'bootstrap_id': '$bootstrap_id'"
      "}"
    )

    run "Accepting bootstrap minion key on Salt master" \
        "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
            metalk8s.orchestrate.bootstrap.accept-minion \
            saltenv=metalk8s-@@VERSION \
            pillar="${pillar[*]}"

    run "Refreshing all modules and data on bootstrap minion" \
        salt-call --state-output=mixed saltutil.sync_all \
            refresh=True \
            saltenv=metalk8s-@@VERSION

    run "Deploying bootstrap node (this may take a while)" \
        "${SALT_MASTER_CALL[@]}" salt-run --state-output=mixed state.orchestrate \
            metalk8s.orchestrate.bootstrap \
            saltenv=metalk8s-@@VERSION \
            pillar="${pillar[*]}"

    # The `mine.update` executed during `metalk8s.orchestrate.bootstrap` seems
    # not always to actually update the mine with all `mine_functions` we
    # expect. Forcing another update seems to resolve this somewhat.
    run "Syncing mine" \
        "$SALT_CALL" mine.update
}


bootstrap_file_is_present() {
    if [ ! -f "$CONFIG_FILEPATH" ]; then
        die "You need to create a BootstrapConfiguration file, at $CONFIG_FILEPATH." \
            "Please refer to the configuration section of the MetalK8s Installation Guide"
        return 1
    fi
}

check_ca_minion() {
    # NOTE: Today using bootstrap script, bootstrap node is also the CA
    # minion, so check for minion id equal to CA minion
    minion_id="$("$SALT_CALL" --out txt --local grains.get id | cut -c 8-)"
    ca_minion="$("$SALT_CALL" --out txt --local pillar.get metalk8s:ca:minion | cut -c 8-)"
    if [ "$minion_id" != "$ca_minion" ]; then
        echo "CA minion \"$ca_minion\" from bootstrap configuration is not equal" \
             "to the local minion ID \"$minion_id\", you need to change" \
             "the local minion ID, or update the bootstrap configuration." >&2
        return 1
    fi
}

main() {
    run "Determine the OS" determine_os
    if [ -z "${PYTHON:-}" ]; then
        run "Installing Python3 package" install_packages python3
        PYTHON=${PYTHON:-$(command -v python3)}
    fi
    run "Checking that BootstrapConfiguration is present" bootstrap_file_is_present
    run "Pre-minion system tests" pre_minion_checks
    run "Configure internal repositories" configure_repositories
    run "Check mandatory packages presence" check_packages_presence
    run "Disabling Salt minion service" disable_salt_minion_service
    run "Stopping Salt minion service" stop_salt_minion_service
    run "Installing mandatory packages" install_packages "${PACKAGES[@]}"
    run "Checking Salt minion ID" check_minion_id
    run "Configuring Salt minion to run in local mode" configure_salt_minion_local_mode
    run "Ensure archive is available" ensure_archives_mounted
    run "Calculating Salt grains in local mode" set_local_grains
    run "Checking CA minion" check_ca_minion
    run "Checking local node" check_local_node

    orchestrate_bootstrap

    "$BASE_DIR"/backup.sh
}

main
