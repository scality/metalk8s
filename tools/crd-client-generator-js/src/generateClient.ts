import Generator from "openapi-to-flowtype/dist/Generator";
import {
  V1CustomResourceDefinition,
  V1beta1CustomResourceDefinition,
} from "@kubernetes/client-node";
const YAML = require("yaml");
const fs = require("fs");
const prettier = require("prettier");

export const DEFAULT_PRETTIER_OPTIONS = {
  parser: "typescript",
};

export function generateClient(
  crdFile: string,
  destinationFile: string,
  prefix?: string
) {
  const prettierOptions = {
    ...DEFAULT_PRETTIER_OPTIONS,
    ...(prettier.resolveConfig.sync(destinationFile) || {}),
  };

  const file = fs.readFileSync(crdFile, "utf8");
  const crdSpec = YAML.parse(file) as V1beta1CustomResourceDefinition &
    V1CustomResourceDefinition;

  const generator = new Generator();

  const versions = crdSpec.spec.version
    ? [crdSpec.spec.version]
    : (crdSpec.spec.versions || []).map((version) => version.name);
  const jsonSchemas = crdSpec.spec.version
    ? { [crdSpec.spec.version]: crdSpec.spec.validation.openAPIV3Schema }
    : (crdSpec.spec.versions || []).reduce(
        (aggregatedJsonSchemas, version) => ({
          ...aggregatedJsonSchemas,
          [version.name]:
            version.schema?.openAPIV3Schema ||
            crdSpec.spec.validation.openAPIV3Schema,
        }),
        {}
      );

  const generateClientHeader = `
  // /!\\ WARNING :  THIS FILE IS AUTOGENERATED FROM A KUBERNETES CUSTOM RESOURCE DEFINITION FILE. DO NOT CHANGE IT, use crd-client-generator-ts to update it.
  import { customObjects } from './api';
  export type Result<T> = T | {error: any};
  
  `;

  const versionsClients = versions.map((version) => {
    const jsonSchema = jsonSchemas[version];

    const typePrefix =
      (prefix || "") + version.replace(/^\w/, (c) => c.toUpperCase());

    const isClusterScoped = crdSpec.spec.scope === "Cluster";
    const isNamespacedScoped = crdSpec.spec.scope === "Namespaced";

    const clusterOrNamespacedCustomObject = isClusterScoped
      ? `ClusterCustomObject(
    '${crdSpec.spec.group}',
    '${version}',
    '${crdSpec.spec.names.plural}',`
      : `NamespacedCustomObject(
      '${crdSpec.spec.group}',
      '${crdSpec.spec.version}',
      namespace,
      '${crdSpec.spec.names.plural}',`;

    const generateTypeDefinition = (typeName: string, typeDefinition) =>
      `export type ${typeName} = ${generator
        .propertiesTemplate(generator.propertiesList(typeDefinition))
        .replace(/"/g, "")};`;

    const singleName = typePrefix + crdSpec.spec.names.kind;
    const singleType = generateTypeDefinition(singleName, jsonSchema);

    const listName = typePrefix + crdSpec.spec.names.listKind;
    const listType = `export type ${listName} = {
    body: {items: ${singleName}[]};
  }`;

    return `
  ${singleType}
  ${listType}
  
  export async function get${listName}(${
      isNamespacedScoped ? "namespace: string" : ""
    }): Promise<Result<${listName}>> {
    if (!customObjects) {
      return { error: 'customObject has not yet been initialized' };
    }
    try {
      return await customObjects.list${clusterOrNamespacedCustomObject}
      );
    } catch (error) {
      return { error };
    }
  }

  export async function get${singleName}(${
      isNamespacedScoped ? "namespace: string, " : ""
    }${singleName}Name: string): Promise<Result<${singleName}>> {
    if (!customObjects) {
      return { error: 'customObject has not yet been initialized' };
    }
    try {
      return await customObjects.get${clusterOrNamespacedCustomObject}
        ${singleName}Name,
      );
    } catch (error) {
      return { error };
    }
  }
  
  export async function delete${singleName}(${
      isNamespacedScoped ? "namespace: string, " : ""
    }${singleName}Name: string) {
    if (!customObjects) {
      return { error: 'customObject has not yet been initialized' };
    }
    try {
      return await customObjects.delete${clusterOrNamespacedCustomObject}
        ${singleName}Name,
        {},
      );
    } catch (error) {
      return { error };
    }
  }
  
  export async function create${singleName}(${
      isNamespacedScoped ? "namespace: string, " : ""
    }body: ${singleName}): Promise<Result<${singleName}>> {
    if (!customObjects) {
      return { error: 'customObject has not yet been initialized' };
    }
    try {
      return await customObjects.create${clusterOrNamespacedCustomObject}
        body,
      );
    } catch (error) {
      return { error };
    }
  }
  
  export async function patch${singleName}(${
      isNamespacedScoped ? "namespace: string, " : ""
    }body: Partial<${singleName}>): Promise<Result<${singleName}>> {
    if (!customObjects) {
      return { error: 'customObject has not yet been initialized' };
    }
    try {
      return await customObjects.patch${clusterOrNamespacedCustomObject}
        body,
      );
    } catch (error) {
      return { error };
    }
  }
  `;
  });

  return prettier.format(
    generateClientHeader + versionsClients.join("\n"),
    prettierOptions
  );
}
