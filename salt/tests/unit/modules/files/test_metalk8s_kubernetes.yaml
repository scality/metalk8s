# Tests that can be run by different `metalk8s_kubernetes` functions
common_tests:
  # Error missing args
  - raises: True
    result: 'Must provide one of .* to .* object'

  # Error invalid manifest no apiVersion
  - manifest:
      invalid: manifest
      content: wrong
      a: b
    raises: True
    result: "apiVersion"

  # Error invalid manifest no kind
  - manifest:
      apiVersion: v1
      invalid: manifest
      content: wrong
      a: b
    raises: True
    result: "kind"

  # Error unknown object
  - manifest:
      apiVersion: v42
      kind: Banana
      spec:
        abc: def
    namespaced: null
    raises: True
    result: "Kind 'Banana' from apiVersion 'v42' is unknown"

  # Error giving manifest and name (manifest file path)
  - name: /path/to/my/manifest.yaml
    manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    raises: True
    result: 'Cannot use both "manifest" and "name".'

  # Error reading manifest file
  - name: /invalid/path/manifest.yaml
    manifest_file_content: null
    raises: True
    result: 'Failed to read file "/invalid/path/manifest.yaml"'

  # Invalid YAML manifest file
  - name: /path/to/my/invalid-manifest.yaml
    manifest_file_content: False
    raises: True
    result: 'Invalid YAML in file "/path/to/my/invalid-manifest.yaml"'

create_object:
  # Simple manifest without labels
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    result: &simple_node_create_result
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt

  # Simple manifest with labels
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          my.first.label: First
          my.second.label: Second
    result:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          my.first.label: First
          my.second.label: Second
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt

  # Simple manifest with saltenv (matching version)
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    saltenv: metalk8s-2.5.0
    result:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          metalk8s.scality.com/version: 2.5.0
          app.kubernetes.io/managed-by: salt
          heritage: salt

  # Simple manifest with saltenv (NOT matching version)
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    saltenv: my-custom-salt-env
    result: *simple_node_create_result

  # Simple manifest using manifest file
  - name: /path/to/my/manifest.yaml
    manifest_file_content:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    result: *simple_node_create_result

  # Error when creating object
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    api_status_code: 0
    raises: True
    result: Failed to create object

delete_object:
  # Simple Pod deletion (using manifest) - No namespace
  - manifest:
      apiVersion: v1
      kind: Pod
      metadata:
        name: my_pod
    called_with:
      name: my_pod
      namespace: default
    result: "<my_pod deleted object dict>"

  # Simple Pod deletion (using manifest)
  - manifest:
      apiVersion: v1
      kind: Pod
      metadata:
        name: my_pod
        namespace: my-custom-namespace
    called_with:
      name: my_pod
      namespace: my-custom-namespace
    result: "<my_pod deleted object dict>"

  # Simple Pod deletion (no manifest) - No namespace
  - apiVersion: v1
    kind: Pod
    name: my_pod
    called_with:
      name: my_pod
      namespace: default
    result: "<my_pod deleted object dict>"

  # Simple Pod deletion (no manifest)
  - apiVersion: v1
    kind: Pod
    name: my_pod
    namespace: my-custom-namespace
    called_with:
      name: my_pod
      namespace: my-custom-namespace
    result: "<my_pod deleted object dict>"

  # Simple already deleted Pod deletion (raise 404, expected)
  - apiVersion: v1
    kind: Pod
    name: my_already_deleted_pod
    api_status_code: 404
    called_with:
      name: my_already_deleted_pod
      namespace: default
    result: null

  # Error when deleting object
  - apiVersion: v1
    kind: Pod
    name: my_pod
    api_status_code: 0
    raises: True
    result: Failed to delete object

replace_object:
  # Simple replace object (same behavior as create)
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    called_with:
      name: my_node
    result: *simple_node_create_result

  # Simple replace object - with old_object
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    old_object: &simple_old_node_object
      # Old object is considered as k8s object so snake case
      api_version: v1
      kind: Node
      metadata:
        name: my_node
        resourceVersion: "123456"
    result: &simple_node_replace_result
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt
        resourceVersion: "123456"

  # Simple replace object - with old_object (resourceVersion overrided)
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        resourceVersion: "987654"
    old_object: *simple_old_node_object
    result: *simple_node_replace_result

  # Replace custom object - with old_object
  - manifest:
      apiVersion: custom/v1
      kind: MyCustomObject
      metadata:
        name: my_object
    old_object:
      # For custom object we keep YAML style as k8s object do not exists in
      # python-kubernetes
      apiVersion: custom/v1
      kind: MyCustomObject
      metadata:
        name: my_object
        resourceVersion: "123456"
    result:
      apiVersion: custom/v1
      kind: MyCustomObject
      metadata:
        name: my_object
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt
        resourceVersion: "123456"

  # Replace service object (special case we need to keep clusterIP)
  - manifest:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
      spec: {}
    old_object:
      # Old object is considered as k8s object so snake case
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        resourceVersion: "123456"
      spec:
        clusterIP: "10.11.12.13"
    result:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt
        resourceVersion: "123456"
      spec:
        clusterIP: "10.11.12.13"

  # Replace service object (special case: clusterIP set in the manifest and
  # old_object, keep the manifest one)
  # NOTE: This test just ensure we keep the one from input manifest and not
  #       replace it with the one from old_object, but in practice apiServer
  #       will reject this call since clusterIP is immutable field
  - manifest:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
      spec:
        clusterIP: "20.21.22.23"
    old_object:
      # Old object is considered as k8s object so snake case
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        resourceVersion: "123456"
      spec:
        clusterIP: "10.11.12.13"
    result:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt
        resourceVersion: "123456"
      spec:
        clusterIP: "20.21.22.23"

  # Replace service object (special case we need to keep healthCheckNodePort)
  - manifest:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
      spec:
        type: LoadBalancer
    old_object:
      # Old object is considered as k8s object so snake case
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        resourceVersion: "123456"
      spec:
        type: LoadBalancer
        clusterIP: "10.11.12.13"
        healthCheckNodePort: 12345
    result:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt
        resourceVersion: "123456"
      spec:
        type: LoadBalancer
        clusterIP: "10.11.12.13"
        healthCheckNodePort: 12345

  # Replace service object (special case: healthCheckNodePort set in the manifest
  # and old_object, keep the manifest one)
  # NOTE: This test just ensure we keep the one from input manifest and not
  #       replace it with the one from old_object, but in practice apiServer
  #       will reject this call since healthCheckNodePort is immutable field
  - manifest:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
      spec:
        clusterIP: "10.11.12.13"
        type: LoadBalancer
        healthCheckNodePort: 12345
    old_object:
      # Old object is considered as k8s object so snake case
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        resourceVersion: "123456"
      spec:
        clusterIP: "10.11.12.13"
        type: LoadBalancer
        healthCheckNodePort: 9876
    result:
      apiVersion: v1
      kind: Service
      metadata:
        name: my_service
        labels:
          metalk8s.scality.com/version: unknown
          app.kubernetes.io/managed-by: salt
          heritage: salt
        resourceVersion: "123456"
      spec:
        clusterIP: "10.11.12.13"
        type: LoadBalancer
        healthCheckNodePort: 12345

  # Error when replacing object
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    api_status_code: 0
    raises: True
    result: Failed to replace object

  # Conflict error - expected - sent back to the state
  # to handle the error
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    api_status_code: 409
    raises: True
    result: 409 Conflict

get_object:
  # Simple Get Pod (using manifest) - No namespace
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    called_with:
      name: my_node
      namespace: default
    result: "<my_node object dict>"

  # Simple Get Pod (using manifest)
  - manifest:
      apiVersion: v1
      kind: Pod
      metadata:
        name: my_pod
        namespace: my-custom-namespace
    called_with:
      name: my_pod
      namespace: my-custom-namespace
    result: "<my_pod object dict>"

  # Simple Get Pod  (no manifest) - No namespace
  - apiVersion: v1
    kind: Pod
    name: my_pod
    called_with:
      name: my_pod
      namespace: default
    result: "<my_pod object dict>"

  # Simple Pod deletion (no manifest)
  - apiVersion: v1
    kind: Pod
    name: my_pod
    namespace: my-custom-namespace
    called_with:
      name: my_pod
      namespace: my-custom-namespace
    result: "<my_pod object dict>"

  # Simple Get unexisting Pod (raise 404, expected)
  - apiVersion: v1
    kind: Pod
    name: my_absent_pod
    api_status_code: 404
    called_with:
      name: my_absent_pod
      namespace: default
    result: null

  # Error when retrieving object
  - apiVersion: v1
    kind: Pod
    name: my_pod
    api_status_code: 0
    raises: True
    result: Failed to get object

update_object:
  # Simple Node update (using manifest)
  - manifest:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          my.new.label: my-new-label
    initial_obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    called_with: &simple_node_update_called_with
      name: my_node
      body:
        metadata:
          labels:
            my.new.label: my-new-label
    result: &simple_node_update_result
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
        labels:
          my.new.label: my-new-label

  # Simple Node update
  - apiVersion: v1
    kind: Node
    name: my_node
    patch:
      metadata:
        labels:
          my.new.label: my-new-label
    initial_obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    called_with: *simple_node_update_called_with
    result: *simple_node_update_result

  # Simple Patch with content type
  - apiVersion: v1
    kind: Node
    name: my_node
    patch:
      metadata:
        labels:
          my.new.label: my-new-label
    content_type: application/merge-patch+json
    initial_obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    called_with:
      <<: *simple_node_update_called_with
      content_type: application/merge-patch+json
    result: *simple_node_update_result

  # Error patch arg missing
  - apiVersion: v1
    kind: Node
    name: my_node
    raises: True
    result: 'Must provide one of "manifest" or "name" \(path to a file\) or "name" and "kind" and "apiVersion" and "patch" to patch object.'

  # Error when updating object
  - apiVersion: v1
    kind: Node
    name: my_node
    patch:
      metadata:
        labels:
          my.new.label: my-new-label
    raises: True
    result: Failed to patch object

list_objects:
  # Simple list Pod
  - apiVersion: v1
    kind: Pod
    called_with:
      namespace: default
    result: &list_object_result
      - "<my first object dict>"
      - "<my second object dict>"

  # Simple list Node
  - apiVersion: v1
    kind: Node
    namespaced: False
    result: *list_object_result

  # List Pod for a specific namespace
  - apiVersion: v1
    kind: Pod
    namespace: my-custom-namespace
    called_with:
      namespace: my-custom-namespace
    result: *list_object_result

  # List Pod for all namespace
  - apiVersion: v1
    kind: Pod
    all_namespaces: True
    called_with:
      all_namespaces: True
    result: *list_object_result

  # List with field_selector
  - apiVersion: v1
    kind: Pod
    namespace: my-custom-namespace
    field_selector: "spec.nodeName=my_node"
    called_with:
      namespace: my-custom-namespace
      field_selector: "spec.nodeName=my_node"
    result: *list_object_result

  # List with label_selector
  - apiVersion: v1
    kind: Pod
    label_selector: "my.simple.label=abcd"
    called_with:
      label_selector: "my.simple.label=abcd"
    result: *list_object_result

  # List all_namespace with field_selector and label_selector
  - apiVersion: v1
    kind: Pod
    all_namespaces: True
    field_selector: "spec.nodeName=my_node"
    label_selector: "my.simple.label=abcd"
    called_with:
      all_namespaces: True
      field_selector: "spec.nodeName=my_node"
      label_selector: "my.simple.label=abcd"
    result: *list_object_result

  # Error listing invalid object
  - apiVersion: v42
    kind: Banana
    namespaced: null
    raises: True
    result: "Kind 'Banana' from apiVersion 'v42' is unknown"

  # Error when listing namespaced resource (default namespace)
  - apiVersion: v1
    kind: Pod
    api_status_code: 0
    raises: True
    result: 'Failed to list resources "v1/Pod" in namespace "default"'

  # Error when listing namespaced resource (specified namespace)
  - apiVersion: v1
    kind: Pod
    namespace: my-custom-namespace
    api_status_code: 0
    raises: True
    result: 'Failed to list resources "v1/Pod" in namespace "my-custom-namespace"'

  # Error when listing cluster resource
  - apiVersion: v1
    kind: Node
    namespaced: False
    api_status_code: 0
    raises: True
    result: 'Failed to list resources "v1/Node"'

get_object_digest:
  # Simple full object digest
  - obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    result: 134164353c059f0e1c55c5d4f40eb500997399f0f1fcbb8dd373baec3a9e8c39

  # Object specific key digest
  - obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    path: 'metadata:name'
    result: e74a1c5e32ef10c596001d2ba43bc94d6687919769e67e8b90386b77cc6f3a3a

  # Object digest md5
  - obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    path: 'metadata:name'
    checksum: 'md5'
    result: d98adbe109489058e7a6ec9716acdadb

  # Unable to get object
  - obj: null
    raises: True
    result: 'Unable to find the object'

  # Unable to find the key in the object
  - obj:
      apiVersion: v1
      kind: Node
      metadata:
        name: my_node
    path: 'metadata:invalid:path'
    raises: True
    result: 'Unable to find key "metadata:invalid:path" in the object'

check_object_ready:
  # Simple Pod Ready
  - obj:
      apiVersion: v1
      kind: Pod
      metadata:
        name: my_pod
        namespace: default
      status:
        conditions:
        - lastProbeTime: null
          lastTransitionTime: "2023-02-13T10:17:11Z"
          status: "True"
          type: Ready
    result: True

  # Simple Object with ObservedGeneration match
  - obj:
      apiVersion: custom/v1
      kind: Custom
      metadata:
        name: my_obj
        namespace: default
        generation: 42
      status:
        conditions:
        - lastTransitionTime: "2023-02-13T10:20:32Z"
          message: Everything good
          observedGeneration: 42
          reason: Ready
          status: "True"
          type: Ready
    result: True

  # Simple Deployment Ready
  - obj:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-deploy
        namespace: default
        generation: 42
      spec:
        replicas: 12
      status:
        observedGeneration: 42
        availableReplicas: 12
        replicas: 12
        updatedReplicas: 12
    result: True

  # Unable to get object
  - obj: null
    raises: True
    result: Unable to find the object

  # Pod not Status
  - obj:
      apiVersion: v1
      kind: Pod
      metadata:
        name: my_pod
        namespace: default
    raises: True
    result: Unable to find the object Ready condition

  # Pod not Ready
  - obj:
      apiVersion: v1
      kind: Pod
      metadata:
        name: my_pod
        namespace: default
      status:
        conditions:
        - lastProbeTime: null
          lastTransitionTime: "2023-02-13T10:17:11Z"
          status: "False"
          type: Ready
    raises: True
    result: Object is not yet Ready

  # Deployment not Ready
  - obj:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-deploy
        namespace: default
        generation: 42
      spec:
        replicas: 12
      status:
        observedGeneration: 42
        availableReplicas: 12
        replicas: 12
        updatedReplicas: 11
    raises: True
    result: "All the Deployment replicas are not yet Ready"
  - obj:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-deploy
        namespace: default
        generation: 42
      spec:
        replicas: 12
      status:
        observedGeneration: 42
        availableReplicas: 13
        replicas: 13
        updatedReplicas: 12
    raises: True
    result: "All the Deployment replicas are not yet Ready"
  - obj:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-deploy
        namespace: default
        generation: 42
      spec:
        replicas: 12
      status:
        observedGeneration: 42
        availableReplicas: 11
        replicas: 12
        updatedReplicas: 12
    raises: True
    result: "All the Deployment replicas are not yet Ready"

  # Object with ObservedGeneration no match
  - obj:
      apiVersion: custom/v1
      kind: Custom
      metadata:
        name: my_obj
        namespace: default
        generation: 43
      status:
        conditions:
        - lastTransitionTime: "2023-02-13T10:20:32Z"
          message: Everything good
          observedGeneration: 42
          reason: Ready
          status: "True"
          type: Ready
    raises: True
    result: "Object has not been updated yet"
  - obj:
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-deploy
        namespace: default
        generation: 43
      spec:
        replicas: 12
      status:
        observedGeneration: 42
        availableReplicas: 12
        replicas: 12
        updatedReplicas: 12
    raises: True
    result: "Object has not been updated yet"

  # Object generation not Ready
  - obj:
      apiVersion: custom/v1
      kind: Custom
      metadata:
        name: my_obj
        namespace: default
        generation: 43
      status:
        conditions:
        - lastTransitionTime: "2023-02-13T10:20:32Z"
          message: Everything not good
          observedGeneration: 43
          reason: Ready
          status: "False"
          type: Ready
    raises: True
    result: "Object is not yet Ready"
