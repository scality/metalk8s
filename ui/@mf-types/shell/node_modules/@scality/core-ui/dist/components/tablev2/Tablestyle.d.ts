/// <reference types="react" />
import { TableHeightKeyType, TableVariantType } from './TableUtils';
import { HeaderGroup } from 'react-table';
export declare const SortIncentive: import("styled-components").StyledComponent<"span", import("styled-components").DefaultTheme, {}, never>;
export declare const SortCaretWrapper: import("styled-components").StyledComponent<"span", import("styled-components").DefaultTheme, {}, never>;
export declare const TableHeader: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {
    headerHeight?: string | number | undefined;
    tabIndex: number | undefined;
}, never>;
type HeadRowType = {
    hasScrollBar: boolean;
    scrollBarWidth: number;
    rowHeight: TableHeightKeyType;
    separationLineVariant: TableVariantType;
};
export declare const HeadRow: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, HeadRowType, never>;
type TableRowType = {
    isSelected: boolean;
    selectedId?: string;
    separationLineVariant: TableVariantType;
};
export declare const TableRow: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, TableRowType, never>;
type TableRowMultiSelectableType = {
    isSelected: boolean;
    separationLineVariant: TableVariantType;
};
export declare const TableRowMultiSelectable: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, TableRowMultiSelectableType, never>;
export declare const TableBody: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export declare const TableWrapper: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export declare const TooltipContent: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, {}, never>;
export declare const NoResult: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, import("styled-system").LayoutProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").FlexboxProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").GridProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").SpaceProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, string | number | symbol> & import("styled-system").PositionProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").ColorProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, string | number | symbol> & import("styled-system").BackgroundProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, import("csstype").Property.Background<import("styled-system").TLengthStyledSystem>> & import("styled-system").BordersProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").TypographyProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").ShadowProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & {
    gap?: string | number | undefined;
} & {
    rowHeight: TableHeightKeyType;
}, never>;
export declare const SortCaret: <DATA_ROW extends Record<string, unknown> = Record<string, unknown>>({ column, }: {
    column: HeaderGroup<DATA_ROW>;
}) => JSX.Element | null;
export {};
//# sourceMappingURL=Tablestyle.d.ts.map