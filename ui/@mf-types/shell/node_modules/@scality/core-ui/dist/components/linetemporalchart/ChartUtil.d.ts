import { Serie } from './LineTemporalChart.component';
import './LineTemporalChart.component';
export type VegaData = {
    timestamp: number;
    label: string;
    value: number | 'NAN';
    isNegativeValue: boolean;
    isDashed: boolean;
}[];
export declare function normlizeVegaFieldName(fieldName: string): string;
export declare function convert2VegaData(addedMissingDataPointSeries: Serie[]): VegaData;
export declare function convertDataBaseValue(data: VegaData, base: number): VegaData;
/**
 * Return the unit label base on the current dataset, and the valueBase which is used to convert the data
 * @param {any} unitRange
 * @param {any} maxValue the maximum value among the data set
 * @returns {any}
 */
export declare function getUnitLabel(unitRange: {
    threshold: number;
    label: string;
}[], maxValue: number): {
    valueBase: number;
    unitLabel: string;
};
/**
 * This function manually adds the missing data points with `null` value caused by downtime of the VMs
 *
 * @param {array} orginalValues - The array of the data points are already sorted according to the time series
 * @param {number} startingTimeStamp - The starting timestamp in seconds
 * @param {number} sampleDuration - The time span value in seconds
 * @param {number} sampleFrequency - The time difference between two data points in seconds
 *
 */
export declare function addMissingDataPoint(orginalValues: [number, string | null][], startingTimeStamp: number, sampleDuration: number, sampleFrequency: number): [number, string | null][];
export declare const getRelativeValue: (value: number, base: number) => number;
export declare const relativeDatumToOriginalDatum: <T>(datum: T, base: number) => T;
export declare const getAbsoluteValue: (relativeValue: number, base: number) => number;
export declare const getColorDomains: (series: Serie[]) => string[];
//# sourceMappingURL=ChartUtil.d.ts.map