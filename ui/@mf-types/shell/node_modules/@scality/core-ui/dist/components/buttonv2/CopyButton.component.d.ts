/// <reference types="react" />
import { Props } from './Buttonv2.component';
export declare const COPY_STATE_IDLE = "idle";
export declare const COPY_STATE_SUCCESS = "success";
export declare const COPY_STATE_UNSUPPORTED = "unsupported";
export declare const useClipboard: () => {
    copy: (text: any) => void;
    copyStatus: string;
};
export declare const CopyButton: ({ label, textToCopy, variant, ...props }: {
    label?: string | undefined;
    textToCopy: string;
    variant?: "outline" | "ghost" | undefined;
} & Omit<import("react").ButtonHTMLAttributes<HTMLButtonElement>, "label" | "size"> & {
    variant?: "outline" | "danger" | "primary" | "secondary" | undefined;
    size?: "default" | "inline" | undefined;
    disabled?: boolean | undefined;
    onClick?: ((event: import("react").MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;
    icon?: import("react").ReactNode;
    label?: import("react").ReactNode;
    tooltip?: Omit<import("../tooltip/Tooltip.component").Props, "children"> | undefined;
    isLoading?: boolean | undefined;
}) => JSX.Element;
//# sourceMappingURL=CopyButton.component.d.ts.map