import React, { ComponentType, LegacyRef } from 'react';
import { Row } from 'react-table';
import { FixedSizeList, ListChildComponentProps, ListItemKeySelector } from 'react-window';
import { TableHeightKeyType, TableLocalType } from './TableUtils';
import { CSSProperties } from 'styled-components';
type VirtualizedRowsType<DATA_ROW extends Record<string, unknown> = Record<string, unknown>> = {
    rows: Row<DATA_ROW>[];
    RenderRow: ComponentType<ListChildComponentProps<Row<DATA_ROW>[]>>;
    rowHeight: TableHeightKeyType;
    setHasScrollbar: React.Dispatch<React.SetStateAction<boolean>>;
    hasScrollbar?: boolean;
    itemKey?: ListItemKeySelector<Row<DATA_ROW>[]>;
    onBottom?: (rowLength: number) => void;
    onBottomOffset?: number;
    listRef?: LegacyRef<FixedSizeList<Row<DATA_ROW>[]>>;
};
export declare const VirtualizedRows: <DATA_ROW extends Record<string, unknown> = Record<string, unknown>>({ rows, rowHeight, setHasScrollbar, onBottom, onBottomOffset, RenderRow, listRef, itemKey, }: VirtualizedRowsType<DATA_ROW>) => JSX.Element;
export declare const useTableScrollbar: () => {
    hasScrollbar: boolean;
    setHasScrollbar: React.Dispatch<React.SetStateAction<boolean>>;
    scrollBarWidth: number;
    handleScrollbarWidth: (node: any) => void;
};
export type RenderRowType = {
    index: number;
    style: CSSProperties;
};
type TableRowsProps<DATA_ROW extends Record<string, unknown> = Record<string, unknown>> = {
    locale?: TableLocalType;
    children?: (children: JSX.Element) => JSX.Element;
    customItemKey?: (index: number, data: DATA_ROW) => string;
    RenderRow: React.MemoExoticComponent<({ index, style }: RenderRowType) => JSX.Element>;
};
export declare function TableRows<DATA_ROW extends Record<string, unknown> = Record<string, unknown>>({ locale, children, customItemKey, RenderRow }: TableRowsProps<DATA_ROW>): JSX.Element | null;
export {};
//# sourceMappingURL=TableCommon.d.ts.map