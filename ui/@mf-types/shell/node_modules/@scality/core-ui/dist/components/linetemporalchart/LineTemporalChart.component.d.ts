/// <reference types="react" />
export declare const YAXIS_TITLE_READ_WRITE = "write(+) / read(-)";
export declare const YAXIS_TITLE_IN_OUT = "in(+) / out(-)";
export declare const UNIT_RANGE_BS: {
    threshold: number;
    label: string;
}[];
export type Serie = {
    resource: string;
    data: [number, string | null][];
    getTooltipLabel: (metricPrefix?: string, resource?: string) => string;
    getLegendLabel?: (metricPrefix?: string, resource?: string) => string;
    color?: string;
    metricPrefix?: string;
    isLineDashed?: boolean;
};
export type LineChartProps = {
    series: Serie[];
    title: string;
    height: number;
    startingTimeStamp: number;
    unitRange?: {
        threshold: number;
        label: string;
    }[];
    isLoading?: boolean;
    isLegendHidden?: boolean;
    yAxisType?: 'default' | 'percentage' | 'symmetrical';
    yAxisTitle?: string;
    helpText?: string | JSX.Element;
    onHover?: (dataPoint: any) => void;
    renderTooltipSerie?: (arg0: {
        color?: string;
        isLineDashed?: boolean;
        name: string;
        value: string;
        key: string;
        unitLabel: string;
    }, tooltipData: any) => string;
};
declare function LineTemporalChart({ series, title, height, startingTimeStamp, unitRange, isLoading, isLegendHidden, yAxisType, yAxisTitle, helpText, renderTooltipSerie, onHover, ...rest }: LineChartProps): JSX.Element;
export { LineTemporalChart };
//# sourceMappingURL=LineTemporalChart.component.d.ts.map