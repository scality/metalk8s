/// <reference types="react" />
import { TableHeightKeyType, TableLocalType } from './tablev2/TableUtils';
export declare const NoResult: import("styled-components").StyledComponent<"div", import("styled-components").DefaultTheme, import("styled-system").LayoutProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").FlexboxProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").GridProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").SpaceProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, string | number | symbol> & import("styled-system").PositionProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").ColorProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, string | number | symbol> & import("styled-system").BackgroundProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, import("csstype").Property.Background<import("styled-system").TLengthStyledSystem>> & import("styled-system").BordersProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").TypographyProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & import("styled-system").ShadowProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> & {
    gap?: string | number | undefined;
} & {
    height: number | string;
}, never>;
export type UnsuccessfulResultProps = {
    name?: {
        en: {
            singular: string;
            plural: string;
        };
        fr?: {
            singular: string;
            plural: string;
        };
    };
    locale?: TableLocalType;
    status: 'error' | 'loading' | 'idle' | 'noResult';
} & ({
    rowHeight: TableHeightKeyType;
    heightInRem?: never;
} | {
    rowHeight?: never;
    heightInRem?: number | string;
});
export declare const UnsuccessfulResult: (props: UnsuccessfulResultProps) => JSX.Element;
//# sourceMappingURL=UnsuccessfulResult.component.d.ts.map