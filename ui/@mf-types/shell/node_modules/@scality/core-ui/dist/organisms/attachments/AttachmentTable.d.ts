import { PropsWithChildren } from 'react';
import { AttachableEntity, AttachmentOperation } from './AttachmentTypes';
import { UseQueryOptions } from 'react-query';
export type AttachmentTableProps<ENTITY_TYPE> = {
    initiallyAttachedEntities: AttachableEntity<ENTITY_TYPE>[];
    initiallyAttachedEntitiesStatus: 'idle' | 'loading' | 'success' | 'error';
    initialAttachmentOperations: AttachmentOperation<ENTITY_TYPE>[];
    entityName: {
        plural: string;
        singular: string;
    };
    getNameQuery?: (entity: AttachableEntity<ENTITY_TYPE>) => UseQueryOptions<unknown, unknown, string>;
    searchEntityPlaceholder: string;
    onAttachmentsOperationsChanged: (attachmentOperations: AttachmentOperation<ENTITY_TYPE>[]) => void;
    filteredEntities: {
        status: 'idle';
    } | {
        status: 'loading' | 'error';
        data?: {
            number: number;
            entities: AttachableEntity<ENTITY_TYPE>[];
        };
    } | {
        status: 'success';
        data: {
            number: number;
            entities: AttachableEntity<ENTITY_TYPE>[];
        };
    };
    onEntitySearchChange: (search?: string) => void;
};
export declare const AttachmentProvider: <ENTITY_TYPE extends unknown>({ children, }: PropsWithChildren<{}>) => JSX.Element;
export declare const useAttachmentOperations: () => {
    resetAttachmentTable: (initiallyAttachedEntities: AttachableEntity<any>[], initialAttachmentOperations: AttachmentOperation<any>[]) => void;
};
export declare const AttachmentTable: <ENTITY_TYPE>({ initiallyAttachedEntities, initiallyAttachedEntitiesStatus, initialAttachmentOperations, onAttachmentsOperationsChanged, entityName, searchEntityPlaceholder, getNameQuery, filteredEntities, onEntitySearchChange, }: AttachmentTableProps<ENTITY_TYPE>) => JSX.Element;
//# sourceMappingURL=AttachmentTable.d.ts.map