name: "destroy-cluster"
description: "Destroy cluster using Terraform"

inputs:
  # Access credentials
  GIT_ACCESS_TOKEN:
    description: "A Github PAT"
    required: true
  ARTIFACTS_USER:
    description: "Scality Artifacts username"
    required: false
  ARTIFACTS_PASSWORD:
    description: "Scality Artifacts password"
    required: false

  # Tooling configuration
  TERRAFORM_VERSION:
    description: "Terraform version to use"
    required: false
    default: "1.3.6"
  TERRAFORM_SNAPSHOT_TAG:
    description: "Tag to checkout for the scality/terraform-snapshot repository"
    required: false
    default: "0.12.0"

  # Cloud configuration
  CLOUD:
    description: "Name of the remote cloud to use (available: ovh)"
    required: false
    default: "ovh"

  # Spawn configuration
  ARTIFACTS_URL:
    description: Full URL to the saved Terraform context (if empty consider that context already there)
    required: false
  NAME:
    description: "Name of the deployment (used in artifacts and the VM names prefix)"
    required: true

  args:
    description: Specific arguments to add to the destroy command
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Checkout terraform-snapshot
      if: inputs.ARTIFACTS_URL
      uses: actions/checkout@v3
      with:
        repository: scality/terraform-snapshot
        path: terraform-snapshot
        token: ${{ inputs.GIT_ACCESS_TOKEN }}
        ref: "${{ inputs.TERRAFORM_SNAPSHOT_TAG }}"
    - name: Install tools
      if: inputs.ARTIFACTS_URL
      shell: bash
      run: sudo apt-get update && sudo apt-get install -y unzip
    - name: Install node
      if: inputs.ARTIFACTS_URL
      uses: actions/setup-node@v3
      with:
        node-version: "14"
    - name: Install Terraform
      if: inputs.ARTIFACTS_URL
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.TERRAFORM_VERSION }}
        terraform_wrapper: false
    - name: Retrieve Terraform context and SSH keys
      if: inputs.ARTIFACTS_URL
      working-directory: terraform-snapshot/terraform/
      shell: bash
      run: |
        curl --fail -LO -u ${{ inputs.ARTIFACTS_USER }}:${{ inputs.ARTIFACTS_PASSWORD }} \
          "${{ inputs.ARTIFACTS_URL }}/terraform-context/${{ inputs.NAME }}/context.tar.gz"
        curl --fail -LO -u ${{ inputs.ARTIFACTS_USER }}:${{ inputs.ARTIFACTS_PASSWORD }} \
          "${{ inputs.ARTIFACTS_URL }}/terraform-context/${{ inputs.NAME }}/terraform"
        curl --fail -LO -u ${{ inputs.ARTIFACTS_USER }}:${{ inputs.ARTIFACTS_PASSWORD }} \
          "${{ inputs.ARTIFACTS_URL }}/terraform-context/${{ inputs.NAME }}/terraform.pub"
        curl -LO -u ${{ inputs.ARTIFACTS_USER }}:${{ inputs.ARTIFACTS_PASSWORD }} \
          "${{ inputs.ARTIFACTS_URL }}/terraform-context/${{ inputs.NAME }}/ssh_config"
    - name: Unpack Terraform context and move SSH keys
      if: inputs.ARTIFACTS_URL
      working-directory: terraform-snapshot/terraform/
      shell: bash
      run: |
        tar -xvf context.tar.gz
        mkdir -p ~/.ssh
        mv terraform terraform.pub ~/.ssh/
    - name: Validate Terraform context
      working-directory: terraform-snapshot/terraform/
      shell: bash
      run: terraform validate
    - name: Destroy cluster with Terraform
      working-directory: terraform-snapshot/terraform/
      shell: bash
      run: terraform destroy -auto-approve ${{ inputs.args }}
      env:
        TF_VAR_cloud: ${{ inputs.CLOUD }}
