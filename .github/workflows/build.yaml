name: "Build"

on:
  workflow_call:
    inputs:
      ref:
        description: "the git revision to checkout"
        default: ${{github.ref}}
        required: false
        type: string
    outputs:
      artifact-name:
        description: "artifacts name"
        value: ${{ jobs.build.outputs.artifact-name }}
      artifact-link:
        description: "artifacts link"
        value: ${{ jobs.build.outputs.artifact-link }}
    secrets:
      ARTIFACTS_USER:
        required: true
      ARTIFACTS_PASSWORD:
        required: true

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-20.04
    outputs:
      artifact-name: ${{ steps.upload.outputs.name }}
      artifact-link: ${{ steps.upload.outputs.link }}
    steps:
      - name: Cleanup some unused ressources
        # Because of the large number of images we embed in the ISO
        # the disk space available start to be a problem.
        # Let's remove some unused ressources to free some space.
        run: |-
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/share/dotnet
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          # NOTE: We fetch depth so that we can put the right `GIT` reference
          # in the product.txt
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install Python 3
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: setup cache for pip
        uses: actions/cache@v4
        env:
          cache-name: pip-packages
        with:
          path: ~/.cache/pip/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('buildchain/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install deps
        run: |
          export DEBIAN_FRONTEND=noninteractive
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            genisoimage \
            isomd5sum \
            hardlink \
            libgpgme-dev libassuan-dev libbtrfs-dev pkg-config libdevmapper-dev
      - name: Install skopeo
        # NOTE: We install skopeo from sources since the version available in "classic"
        #      repositories is too old and not compatible with docker > 1.25 (which is the one embedded
        #      in the image we use here)
        env:
          SKOPEO_VERSION: 1.15.1
        run: |
          curl -Lo skopeo.tar.gz https://github.com/containers/skopeo/archive/refs/tags/v${SKOPEO_VERSION}.tar.gz && \
          tar -zxf skopeo.tar.gz && \
          cd skopeo-${SKOPEO_VERSION} && \
          make bin/skopeo && \
          sudo mv bin/skopeo /usr/local/bin/ && \
          cd .. && rm -rf skopeo.tar.gz skopeo-${SKOPEO_VERSION}
      - name: Build everything
        run: ./doit.sh -n 4 --verbosity 2 --failure-verbosity 2
      - name: Prepare artifacts
        env:
          DEST_DIR: "artifacts"
          ARTIFACTS: >-
            build.log
            _build/metalk8s.iso
            _build/SHA256SUM
            _build/root/product.txt
        run: |
          mkdir -p "$DEST_DIR"
          for artifact in $ARTIFACTS; do
            cp -r "$artifact" "$DEST_DIR"
          done
      - name: Upload artifacts
        id: upload
        uses: scality/action-artifacts@v4
        with:
          method: upload
          url: https://artifacts.scality.net
          user: ${{ secrets.ARTIFACTS_USER }}
          password: ${{ secrets.ARTIFACTS_PASSWORD }}
          source: artifacts
      - name: Cleanup build tree
        run: ./doit.sh clean && test ! -d _build

  build-shell-ui:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Compute shell-ui version
        run: |
          source VERSION
          echo "SHELL_UI_VERSION=$VERSION_MAJOR.$VERSION_MINOR.$VERSION_PATCH$VERSION_SUFFIX" >> $GITHUB_ENV
      - name: Build shell-ui container image
        run: docker build . --tag shell-ui:v$SHELL_UI_VERSION
        working-directory: shell-ui
      - name: Extract shell folder from shell-ui container
        run: |
          docker create --name shell-ui shell-ui:v$SHELL_UI_VERSION
          docker cp shell-ui:/usr/share/nginx/html/shell .
          docker rm shell-ui
          tar cvf shell.tar shell
      - name: Save shell-ui container image
        run: >
          docker save shell-ui:v$SHELL_UI_VERSION |
          gzip > shell-ui.tar.gz
      - name: Prepare artifacts
        run: mkdir -p "artifacts/images" && mv shell-ui.tar.gz artifacts/images/ && mv shell.tar artifacts/images/
      - name: Upload artifacts
        uses: scality/action-artifacts@v4
        with:
          method: upload
          url: https://artifacts.scality.net
          user: ${{ secrets.ARTIFACTS_USER }}
          password: ${{ secrets.ARTIFACTS_PASSWORD }}
          source: artifacts

  build-docs:
    uses: ./.github/workflows/build-docs.yaml
    secrets: inherit
    with:
      ref: ${{ inputs.ref }}

  build_integration_container_nginx:
    runs-on: ubuntu-20.04
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Shell UI dependencies
        run: |
          cd shell-ui
          npm ci --legacy-peer-deps
      - name: Build Shell UI
        run: |
          cd shell-ui
          npm run rsbuild
      - name: Install UI dependencies
        run: |
          cd ui
          npm ci --legacy-peer-deps
      - name: Build UI
        run: |
          cd ui
          npm run build
      - name: Prepare Services Volumes
        run: |
          mkdir -p service
          mkdir -p service/shell
          cp -r ui/build/* service/
          cp -r ui/build/.well-known service/.well-known
          cp -r shell-ui/build/* service/shell/
      - name: Build container with nginx configuration for integration tests
        run: |
          cat > Dockerfile <<EOF
          FROM nginx:alpine
          COPY ui/standalone-nginx.conf /etc/nginx/conf.d/default.conf
          ADD service /usr/share/nginx/html
          EOF
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          push: true
          file: Dockerfile
          context: .
          tags: ghcr.io/${{ github.repository_owner }}/metalk8s-nginx-integration-tests:${{ github.sha }}

  integration_tests_ui:
    runs-on: ubuntu-20.04
    needs:
      - build_integration_container_nginx
    services:
      app:
        image: ghcr.io/${{ github.repository_owner }}/metalk8s-nginx-integration-tests:${{ github.sha }}
        credentials:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        ports:
          - 80:80
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Cypress and its dependencies
        run: |
          cd ui
          PKGS="har-validator cypress cypress-cucumber-preprocessor cypress-wait-until @testing-library/cypress"
          for pkg in $PKGS; do
            npm install --no-save --no-package-lock --legacy-peer-deps $pkg@$(node -p \
              -e "require('./package-lock.json').dependencies['$pkg'].version" \
            ) || exit 1
          done
      - name: Wait for application to be available
        run: |
          bash -c '
            attempts=0
            until curl -Isfo /dev/null http://localhost/; do
              (( attempts++ ))
              if [ $attempts -gt 100 ]; then
                >&2 echo "Failed to reach application after 5 minutes"
                exit 1
              fi
              sleep 3
            done
          '
      - name: Run all UI integration tests
        env:
          CYPRESS_BASE_URL: http://localhost
        run: |
          cd ui
          rm -rf babel.config.js
          npm run test:integration --no-update-notifier
      - name: Prepare upload folder
        if: always()
        run: |
          mkdir -p upload/ui/cypress
          mv ui/cypress/screenshots upload/ui/cypress/screenshots || true
          mv ui/cypress/videos upload/ui/cypress/videos || true
          mv junit upload/ui || true
      - name: Upload artifacts
        if: always()
        uses: scality/action-artifacts@v4
        with:
          method: upload
          url: https://artifacts.scality.net
          user: ${{ secrets.ARTIFACTS_USER }}
          password: ${{ secrets.ARTIFACTS_PASSWORD }}
          source: upload

  write-final-status:
    runs-on: ubuntu-20.04
    needs:
      - build
      - build-shell-ui
      - build-docs
      - integration_tests_ui
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Upload final status
        if: always()
        uses: scality/actions/upload_final_status@1.8.0
        with:
          ARTIFACTS_USER: ${{ secrets.ARTIFACTS_USER }}
          ARTIFACTS_PASSWORD: ${{ secrets.ARTIFACTS_PASSWORD }}
          JOBS_RESULTS: ${{ join(needs.*.result) }}
