[tox]
skipsdist = true
minversion = 3.18.0
requires = virtualenv
isolated_build = true

[testenv]
allowlist_externals = bash
basepython = python3
skip_install = true
setenv =
    VIRTUALENV_NO_DOWNLOAD=1

[testenv:pip-compile]
description =
    Update the requirements.txt files.
basepython = python3.10
skip_install = true
deps =
    pip==20.3.3
    pip-tools==5.4.0
setenv =
    CUSTOM_COMPILE_COMMAND = tox -e pip-compile
allowlist_externals =
    gawk
    bash
commands =
    pip-compile \
        --emit-index-url --emit-trusted-host --annotate \
        --allow-unsafe \
        {posargs:--upgrade} \
        -o "buildchain/requirements.txt" \
        "buildchain/requirements.in"
    # Remove pyinotify and/or macfsevents
    gawk -i inplace -- "/^[^ ]/\{e=1\}; /^pyinotify/\{e=0\}; /^macfsevents/\{e=0\}; e\{print\}" "{toxinidir}/buildchain/requirements.txt"
    # Add pyinotify and macfsevents from platform-requirements.txt
    bash -c 'cat "{toxinidir}/buildchain/platform-requirements.txt" >> "{toxinidir}/buildchain/requirements.txt"'

    pip-compile \
        --emit-index-url --emit-trusted-host --annotate \
        --allow-unsafe \
        {posargs:--upgrade} \
        -o "docs/requirements.txt" \
        "docs/requirements.in"
    pip-compile \
        --emit-index-url --emit-trusted-host --annotate --generate-hashes \
        --allow-unsafe \
        {posargs:--upgrade} \
        -o "tests/requirements.txt" \
        "tests/requirements.in"
    pip-compile \
        --emit-index-url --emit-trusted-host --annotate --generate-hashes \
        --allow-unsafe \
        {posargs:--upgrade} \
        -o "salt/tests/requirements.txt" \
        "salt/tests/requirements.in"

[testenv:docs]
description = Render and lint documentation.
skip_install = true
allowlist_externals = {toxinidir}/docs/build.cmd
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    doc8 docs/
    {toxinidir}/docs/build.cmd {posargs:html}
passenv =
    READTHEDOCS
setenv =
    O = -W {env:O:}

[testenv:alert-tree]
description = Interact with MetalK8s alerts as a tree.
allowlist_externals = poetry
changedir = {toxinidir}/tools/lib-alert-tree
commands =
    poetry install -q -E cli --no-dev --remove-untracked
    poetry run python -m metalk8s {posargs:"--help"}

[testenv:compile-alert-tree-deps]
description = Lock lib_alert_tree dependencies and export as a requirements.txt file.
allowlist_externals = poetry
changedir = {toxinidir}/tools/lib-alert-tree
commands =
    poetry lock
    poetry export -o requirements.txt -E cli --without-hashes

[doc8]
ignore-path = docs/_build,docs/requirements.txt
ignore-path-errors = docs/installation/introduction.rst;D001

[testenv:unit-tests]
basepython = python3.10
description =
    Run Python unit tests.
deps =
  -r{toxinidir}/salt/tests/requirements.txt
commands =
    pytest --cov-report=term-missing \
           --cov=salt/_modules \
           --cov=salt/_runners \
           --cov-fail-under=100 \
          {posargs} salt/tests/unit

[testenv:pre-commit]
description =
    Run pre-commit hook
deps =
    pre-commit
    virtualenv
commands =
    bash -c "pre-commit run {posargs}"

[testenv:lint]
description =
    Lint all files using pre-commit
deps =
    pre-commit
    virtualenv
commands =
    bash -c "pre-commit run --all-files {posargs}"

[testenv:lint-shell]
description =
    Lint Shell scripts using shellcheck.
allowlist_externals =
    {[testenv]allowlist_externals}
    shellcheck
commands =
    bash -c "shellcheck $(git ls-files | grep -P '\.sh$')"
    bash -c "shellcheck $(git ls-files | grep -P '\.sh\.in$')"

[testenv:chart-render]
description =
    Run the chart render script
allowlist_externals =
    {toxinidir}/charts/render.py
deps =
    pyyaml
commands =
    {toxinidir}/charts/render.py {posargs}

[testenv:tests]
description =
    Run tests suite remotely (uses local Vagrant configuration by default).
deps =
    -r{toxinidir}/tests/requirements.txt
passenv =
    SSH_CONFIG_FILE
    TEST_HOSTS_LIST
    ISO_MOUNTPOINT
    BOOTSTRAP_BACKUP_ARCHIVE
    CONTROL_PLANE_INGRESS_VIP
    WORKLOAD_PLANE_INGRESS_VIPS
setenv =
    VAGRANT_CWD={toxinidir}
commands_pre =
    - bash -c "vagrant ssh-config > {envdir}/vagrant_ssh_config"
commands =
    pytest \
         --ssh-config={env:SSH_CONFIG_FILE:{envdir}/vagrant_ssh_config} \
         --hosts={env:TEST_HOSTS_LIST:bootstrap} \
         --iso-root={env:ISO_MOUNTPOINT:/vagrant/_build/root} \
         {posargs:-m local} tests

[testenv:tests-local]
description =
    Run tests suite on the bootstrap node of an installation.
deps = {[testenv:tests]deps}
passenv =
    ISO_MOUNTPOINT
    BOOTSTRAP_BACKUP_ARCHIVE
commands =
    pytest \
        --iso-root={env:ISO_MOUNTPOINT:_build/root} \
        {posargs:-m local} tests

[pytest]
bdd_strict_gherkin = false
markers =
    ci: tag a BDD feature as part of CI test suite
    install: tag a BDD feature as an installation scenario
    local: tag a BDD feature as part of local test suite
    multinodes: tag a BDD feature requiring more than one node to run
    post: tag a BDD feature as a post-installation test
    slow: tag a BDD feature as a long running test
    ui: tag a BDD feature as related to MetalK8s UI
    salt: tag a BDD feature as related to Salt operations
    monitoring: tag a BDD feature as related to monitoring
    ingress: tag a BDD feature as related to ingress
    volume: tag a BDD feature as related to Volume management
    bootstrap: tag a BDD feature as related to bootstrap
    authentication: tag a BDD feature as related to authentication
    csc: tag a BDD feature related to Cluster and Service configuration
    solution: tag a BDD feature as related to solution
    restore: tag a BDD feature as related to bootstrap node recovery
filterwarnings =
    ignore:encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.:UserWarning
    ignore:Support for unsafe construction of public numbers from encoded data will be removed in a future version. Please use EllipticCurvePublicKey.from_encoded_point:UserWarning
